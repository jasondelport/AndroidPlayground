apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'me.tatarka.retrolambda'
apply from: '../config/quality.gradle'

retrolambda {
    jdk JAVA8_HOME
    oldJdk JAVA_HOME
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    def Properties properties = new Properties()

    defaultConfig {
        applicationId "com.jasondelport.playground"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName "1.1"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [GOOGLE_GEO_API_KEY: "AIzaSyAmtcM6dHT-zkwgKJZuefum0bP7OdFxQ1g"]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        debug {
            storeFile rootProject.file('debug.jks')
            storePassword 'android'
            keyAlias 'debug'
            keyPassword 'android'
        }
    }

    buildTypes {

        debug {
            properties.load(new FileInputStream(file('/Users/jasondelport/Code/secure/AndroidPlayground.properties')))
            buildConfigField "String", "URL", properties['url']
            resValue "string", "url", properties['url']
            resValue "string", "build_time", buildTime
            resValue "string", "git_revision", "\"${gitRevision()}\""
            debuggable true
        }

        release {
            properties.load(new FileInputStream(file('/Users/jasondelport/Code/secure/AndroidPlayground.properties')))
            buildConfigField "String", "URL", properties['url']
            resValue "string", "url", properties['url']
            resValue "string", "build_time", buildTime
            resValue "string", "git_revision", "\"${gitRevision()}\""
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    lintOptions {
        quiet true
        abortOnError false
        checkReleaseBuilds false
        ignoreWarnings true
        warning 'InvalidPackage'
        xmlReport false
        htmlReport true
        lintConfig file("${project.rootDir}/config/quality/lint/lint.xml")
        htmlOutput file("$project.buildDir/reports/lint/lint-result.html")
        xmlOutput file("$project.buildDir/reports/lint/lint-result.xml")
    }


    task('updateIcon') << {
        def caption = "v" + defaultConfig.versionName.toString()
        exec {
            executable 'bash'
            args "$rootProject.rootDir/scripts/icon-gen.sh", caption, rootProject.rootDir, '/scripts'
        }
    }

    updateIcon.doLast{
        println 'Finished generating icon'
    }

    //preBuild.dependsOn updateIcon

}

def gitRevision() {
    def cmd = "git rev-parse --short HEAD"
    return cmd.execute().text.trim()
}

task('copyAll') {
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (!output.outputFile.name.contains('unsigned')) {
                task("copy${variant.name.capitalize()}", type: Copy) {
                    println output.outputFile
                    from(output.outputFile)
                    into("/Users/jasondelport/Downloads/")
                }
                dependsOn("copy${variant.name.capitalize()}")
            }
        }
    }
}

task('installAllExceptRelease') {
    android.applicationVariants.all { variant ->
        if (!variant.name.equals('release')) {
            dependsOn("install${variant.name.capitalize()}")
        }
        /*
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            println outputFile // full path
            println outputFile.name // just the file name
            if (!outputFile.name.contains('unsigned')) {
                dependsOn("install${variant.name.capitalize()}")
            }
        }
        */
    }
}

task('runDebug', type: Exec, dependsOn: 'installDebug') {
    def adb = android.getAdbExe().toString()
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.jasondelport.playground.debug/com.jasondelport.playground.ui.activity.MainActivity'
    doLast {
        println 'Finished launching application'
    }
}
/*
task('runRelease', type: Exec, dependsOn: 'installRelease') {
    def adb = android.getAdbExe().toString()
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.jasondelport.playground/.ui.activity.MainActivity'
    doFirst {
        println '=== start ==='
    }
    doLast {
        println '=== end ==='
    }
}

*/
// ./gradlew dependencyUpdates
// ./gradlew dependencyUpdates -Drevision=release
// ./gradlew build --refresh-dependencies
// ./gradlew :app:dependencies
// ./gradlew :app:androidDependencies.
dependencies {

    def GOOGLE_LIBRARY_VERSION = '23.2.1'
    // google
    compile "com.android.support:support-v13:$GOOGLE_LIBRARY_VERSION"
    compile "com.android.support:design:$GOOGLE_LIBRARY_VERSION"
    compile "com.android.support:recyclerview-v7:$GOOGLE_LIBRARY_VERSION"
    compile "com.android.support:appcompat-v7:$GOOGLE_LIBRARY_VERSION"
    compile "com.android.support:cardview-v7:$GOOGLE_LIBRARY_VERSION"
    compile "com.android.support:percent:$GOOGLE_LIBRARY_VERSION"
    compile "com.android.support:support-annotations:$GOOGLE_LIBRARY_VERSION"
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'com.google.android.gms:play-services-maps:8.4.0'
    compile 'com.google.android.gms:play-services-location:8.4.0'

    // rx java
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'io.reactivex:rxjava:1.1.2'

    // square
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.squareup.picasso:picasso:2.5.0'
    compile 'com.squareup.retrofit2:retrofit:2.0.0'
    compile 'com.squareup.retrofit2:converter-gson:2.0.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.0'
    compile 'com.squareup:otto:1.3.8' // no longer in active development
    compile 'com.squareup.moshi:moshi:1.1.0'

    // jake wharton
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.jakewharton.timber:timber:4.1.1'
    compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'

    // auto values
    provided 'com.google.auto.value:auto-value:1.2-rc1' // needed for Android Studio
    apt 'com.google.auto.value:auto-value:1.2-rc1'
    apt 'com.ryanharter.auto.value:auto-value-parcel:0.2.0'

    // saved instance state
    compile 'frankiesardo:icepick:3.2.0'
    provided 'frankiesardo:icepick-processor:3.2.0'
    compile 'org.parceler:parceler-api:1.0.4'
    provided 'org.parceler:parceler:1.0.4'

    //dagger
    compile 'com.google.dagger:dagger:2.1'
    apt 'com.google.dagger:dagger-compiler:2.1'
    compile 'javax.annotation:javax.annotation-api:1.2'

    //permissions
    compile 'com.tbruyelle.rxpermissions:rxpermissions:0.6.0@aar'

    // captures ANR errors
    compile 'com.github.anrwatchdog:anrwatchdog:1.2.0'

    // robolectric
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.hamcrest:hamcrest-integration:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile ('org.robolectric:robolectric:3.0') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    // espresso
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile "com.android.support:support-annotations:$GOOGLE_LIBRARY_VERSION"
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    // for intent mocking
    //androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.1'
    // for webview testing
    //androidTestCompile 'com.android.support.test.espresso:espresso-web:2.2.1'

}
