apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.jakewharton.hugo'


android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    def Properties properties = new Properties()

    defaultConfig {
        applicationId "com.jasondelport.notes"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        debug {
            storeFile rootProject.file('debug.jks')
            storePassword 'android'
            keyAlias 'debug'
            keyPassword 'android'
        }
    }

    buildTypes {

        debug {
            properties.load(new FileInputStream(file('/Users/jasondelport/Code/secure/AndroidPlayground.properties')))
            buildConfigField "String", "URL", properties['url']
            resValue "string", "url", properties['url']
            resValue "string", "git_revision", "\"${gitRevision()}\""
            debuggable true
        }

        release {
            properties.load(new FileInputStream(file('/Users/jasondelport/Code/secure/AndroidPlayground.properties')))
            buildConfigField "String", "URL", properties['url']
            resValue "string", "url", properties['url']
            resValue "string", "git_revision", "\"${gitRevision()}\""
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    lintOptions {
        quiet true
        abortOnError false
        checkReleaseBuilds false
        ignoreWarnings true
    }

    task('updateIcon', type: Exec) {
        def caption = "v" + defaultConfig.versionName.toString()
        executable 'bash'
        args "$rootProject.rootDir/scripts/icon-gen.sh", caption, rootProject.rootDir, '/scripts'
        doLast {
            println 'Finished generating icon'
        }
    }

    //preBuild.dependsOn updateIcon
}

def gitRevision() {
    def cmd = "git rev-parse --short HEAD"
    return cmd.execute().text.trim()
}

task('copyAll') {
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (!output.outputFile.name.contains('unsigned')) {
                task("copy${variant.name.capitalize()}", type: Copy) {
                    println output.outputFile
                    from(output.outputFile)
                    into("/Users/jasondelport/Downloads/")
                }
                dependsOn("copy${variant.name.capitalize()}")
            }
        }
    }
}

task('installAllExceptRelease') {
    android.applicationVariants.all { variant ->
        if (!variant.name.equals('release')) {
            dependsOn("install${variant.name.capitalize()}")
        }
        /*
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            println outputFile // full path
            println outputFile.name // just the file name
            if (!outputFile.name.contains('unsigned')) {
                dependsOn("install${variant.name.capitalize()}")
            }
        }
        */
    }
}

task('runDebug', type: Exec, dependsOn: 'installDebug') {
    def adb = android.getAdbExe().toString()
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.jasondelport.notes.debug/com.jasondelport.notes.ui.activity.MainActivity'
    doLast {
        println 'Finished launching application'
    }
}
/*
task('runRelease', type: Exec, dependsOn: 'installRelease') {
    def adb = android.getAdbExe().toString()
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.jasondelport.notes/.ui.activity.MainActivity'
    doFirst {
        println '=== start ==='
    }
    doLast {
        println '=== end ==='
    }
}

*/
//dependencyUpdates
dependencies {

    // google
    compile 'com.android.support:support-v13:23.0.1'
    compile 'com.android.support:design:23.0.1'
    compile 'com.android.support:recyclerview-v7:23.0.1'
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.android.support:cardview-v7:23.0.1'
    compile 'com.android.support:percent:23.0.1'
    compile 'com.android.support:support-annotations:23.0.1'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.google.android.gms:play-services:8.1.0'

    // rx java
    compile 'io.reactivex:rxandroid:1.0.1'

    // square
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.squareup.picasso:picasso:2.5.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup:otto:1.3.8'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'

    // jake wharton
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.jakewharton.timber:timber:3.1.0'

    // saved instance state
    compile 'frankiesardo:icepick:3.1.0'
    provided 'frankiesardo:icepick-processor:3.1.0'
    compile 'org.parceler:parceler-api:1.0.1'
    provided 'org.parceler:parceler:1.0.1'

    //dagger
    compile 'com.google.dagger:dagger:2.0.1'
    apt 'com.google.dagger:dagger-compiler:2.0.1'
    compile 'javax.annotation:javax.annotation-api:1.2'

}
